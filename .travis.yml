# The testing matrix considers ruby/puppet versions supported by PE:
# ------------------------------------------------------------------------------
# Release       Puppet   Ruby   EOL
# PE 2018.1     5.5      2.4    2020-05 (LTS)
# PE 2019.0     6.0      2.5    2019-08-31
# PE 2019.1     6.4      2.5    2019-02-28
#
# https://puppet.com/docs/pe/2018.1/component_versions_in_recent_pe_releases.html
# https://puppet.com/misc/puppet-enterprise-lifecycle
# https://puppet.com/docs/pe/2018.1/overview/getting_support_for_pe.html
# ==============================================================================
#
# Travis CI Repo options for this pipeline:
#
#   Travis CI Env Var      Type      Notes
#   ---------------------  --------  -------------------------------------------
#   GITHUB_OAUTH_TOKEN     Secure    Required for automated GitHub releases
#   PUPPETFORGE_API_TOKEN  Secure    Required for automated Forge releases
#   SKIP_GITHUB_RELEASE    Optional  Skips releasing to GitHub if "yes"
#   SKIP_FORGE_RELEASE     Optional  Skips releasing to Puppet Forge if "yes"
#
#   The secure env vars wiil be filtered in Travis CI log output, and aren't
#   provided to untrusted builds (i.e, triggered by PR from another repository)
#
# ------------------------------------------------------------------------------
#
# Travis CI Trigger options for this pipeline:
#
#   To validate if $GITHUB_OAUTH_TOKEN is able to publish a GitHub release,
#   trigger a custom Travis CI build for this branch using the CUSTOM CONFIG:
#
#     env: VALIDATE_TOKENS=yes
#
# ------------------------------------------------------------------------------
#
# Release Engineering notes:
#
#   To automagically publish a release to GitHub and PuppetForge:
#
#   - Set GITHUB_OAUTH_TOKEN and PUPPETFORGE_API_TOKEN as secure env variables
#     in this repo's Travis CI settings
#   - Push a git tag that matches the version in the module's `metadata.json`
#   - The tag SHOULD be annotated with release notes, but nothing enforces this
#     convention at present
#
# ------------------------------------------------------------------------------
---

language: ruby
cache: bundler
sudo: false

bundler_args: --without development system_tests --path .vendor

notifications:
  email: false

before_install:
  - for x in ${HOME}/.rvm/gems/*; do gem uninstall -I -x -i "${x}" -v '>= 1.17' bundler || true; gem uninstall -I -x -i "${x}@global" -v '>= 1.17' bundler || true; done
  - gem install -v '~> 1.17' bundler
  - rm -f Gemfile.lock

env:
  global:
    - 'FORGE_USER_AGENT="CI-ForgeReleng-Script/0.4.0 (Purpose/forge-ops-for-${TRAVIS_REPO_SLUG})"'

stages:
  - name: 'validate tokens'
    if: 'env(VALIDATE_TOKENS) = yes'
  - name: check
    if: 'NOT env(VALIDATE_TOKENS) = yes'
  - name: spec
    if: 'NOT env(VALIDATE_TOKENS) = yes'
  - name: release
    if: 'tag IS present AND NOT env(VALIDATE_TOKENS) = yes'

_minimal_step: &_minimal_step
  language: minimal
  install: skip
  before_install: skip

_pre_release_checks: &_pre_release_checks
  before_script:
    - "export PUPMOD_METADATA_VERSION=`jq -r .version metadata.json`"
    - 'function tag_must_match_module_version {
        [[ $TRAVIS_TAG =~ ^poxvup-${PUPMOD_METADATA_VERSION}$|^${PUPMOD_METADATA_VERSION}$ ]] || {
        printf "\n=== PRE-RELEASE ERROR: Puppet metadata version ''%s'' doesn''t match tag ''%s''\n\n"
         "$PUPMOD_METADATA_VERSION" "$TRAVIS_TAG";
         false;
      } }'
    - tag_must_match_module_version

jobs:
  include:
    ###    - stage: check
    ###      name: 'Syntax, style, and validation checks'
    ###      rvm: 2.4.5
    ###      env: PUPPET_VERSION="~> 5"
    ###      script:
    ###        - bundle exec rake validate
    ###        - bundle exec rake lint
    ###        - bundle exec puppet module build
    ###
    ###    - stage: spec
    ###      rvm: 2.4.5
    ###      name: 'Puppet 5.5 (PE 2018.1)'
    ###      env: PUPPET_VERSION="~> 5.5.0"
    ###      script:
    ###        - bundle exec rake spec
    ###
    ###    - stage: spec
    ###      name: 'Puppet 5.x (Latest)'
    ###      rvm: 2.4.5
    ###      env: PUPPET_VERSION="~> 5.0"
    ###      script:
    ###        - bundle exec rake spec
    ###
    ###    - stage: spec
    ###      name: 'Puppet 6.0 (PE 2019.0)'
    ###      rvm: 2.5.3
    ###      env: PUPPET_VERSION="~> 6.0.0"
    ###      script:
    ###        - bundle exec rake spec
    ###
    ###    - stage: spec
    ###      name: 'Puppet 6.4 (PE 2019.1)'
    ###      rvm: 2.5.3
    ###      env: PUPPET_VERSION="~> 6.4.0"
    ###      script:
    ###        - bundle exec rake spec
    ###
    ###    - stage: spec
    ###      name: 'Latest Puppet 6.x'
    ###      rvm: 2.5.3
    ###      env: PUPPET_VERSION="~> 6.0"
    ###      script:
    ###        - bundle exec rake spec

    - stage: release
      name: 'Release to GitHub'
      if: 'NOT env(SKIP_GITHUB_RELEASE) = yes'
      <<: *_minimal_step
      <<: *_pre_release_checks
      script:
        - 'committish="$(git log --tags $TRAVIS_TAG -1 --pretty=%H)"'
        - 'subject="$(git for-each-ref refs/tags/$TRAVIS_TAG
             --format="%(contents:subject)" |  sed -e ''s/"/\\"/g'' |
             perl -pe ''s/\n/\\n/g'' )"'
        - 'body="$(git for-each-ref refs/tags/$TRAVIS_TAG
            --format="%(contents:body)" |  sed -e ''s/"/\\"/g'' |
            perl -pe ''s/\n/\\n/g'' )"'
        - 'printf ''{"tag_name": "%s", "target_commitish": "%s", "name": "%s", "body": "%s", "prerelease": false}''
            "$TRAVIS_TAG" "$committish" "$subject" "$body" > rel.json'
        - 'curl -sS --fail -X POST -d @rel.json -A "$FORGE_USER_AGENT"
            -H "Accept: application/vnd.github.v3+json"
            -H "Authorization: token $GITHUB_OAUTH_TOKEN"
              "https://api.github.com/repos/${TRAVIS_REPO_SLUG}/releases"'

    - stage: release
      name: 'Release to PuppetForge'
      if: 'NOT env(SKIP_FORGE_RELEASE) = yes'
      rvm: 2.4.5
      env: PUPPET_VERSION="~> 5.5.0"
      <<: *_pre_release_checks
      script:
        - 'set -ev'
        - 'git clean -f -x -d'
        - 'gem install -v "$PUPPET_VERSION" puppet'
        - 'puppet module build'
        - 'find pkg -name ''*.tar.gz'''
        - 'curl -sS --fail -A "$FORGE_USER_AGENT"
           -H "Authorization: Bearer ${PUPPETFORGE_API_TOKEN}"
           -X POST -F "file=@$(find $PWD/pkg -name ''*.tar.gz'')"
           https://forgeapi.puppet.com/v3/releases'

    - stage: 'validate tokens'
      <<: *_minimal_step
      name:  'validate CI GitHub OAuth token has sufficient scope to release'
      script:
      - 'echo; echo "===== GITHUB_OAUTH_TOKEN validation";echo "  (TRAVIS_SECURE_ENV_VARS=$TRAVIS_SECURE_ENV_VARS)"; echo'
      - 'OWNER="$(echo $TRAVIS_REPO_SLUG | cut -d/ -f1)"'
      - 'curl -H "Authorization: token ${GITHUB_OAUTH_TOKEN}"
          "https://api.github.com/users/$OWNER"
          -I | grep ^X-OAuth-Scopes | egrep -w "repo|public_repo"'

    - stage: 'validate tokens'
      name:  'validate CI Puppet Forge token authenticates with API'
      <<: *_minimal_step
      script:
      - 'echo; echo "===== PUPPETFORGE_API_TOKEN validation"; echo "  (TRAVIS_SECURE_ENV_VARS=$TRAVIS_SECURE_ENV_VARS)"; echo'
      - 'curl -sS --fail -A "$FORGE_USER_AGENT"
         -H "Authorization: Bearer ${PUPPETFORGE_API_TOKEN:-default_content_to_cause_401_response}"
         https://forgeapi.puppet.com/v3/users > /dev/null'
